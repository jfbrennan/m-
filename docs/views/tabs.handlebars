<h1 class="mar-b-xs">Tabs</h1>
<h2 class="txt-gray-5 mar-t-0">Master-detail pattern for navigating content</h2>
<h2 id="demo">Demo</h2>
<code-sample>
<template>
  <m-tabs role="tablist">
    <button role="tab" aria-selected="true">Selected</button>
    <button role="tab">Not Selected</button>
    <button role="tab" disabled>Disabled</button>
    <a href="/" role="tab">Link</a>
  </m-tabs>
  <p class="txt-xs txt-gray-5">See <a href="#select-tab">selecting tabs</a> to learn how to select a tab</p>
</template>
</code-sample>
<h2 id="api">API</h2>
<h3 id="tag">Tags</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Type</th>
    <th colspan="6">Content</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>m-tabs</code></td>
    <td colspan="2">Custom tag</td>
    <td colspan="6"><code>button</code> or <code>a</code> children</td>
  </tr>
  </tbody>
</table>
<h3 id="attributes">Attributes</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Value</th>
    <th colspan="6">Description</th>
  </tr>
  </thead>
</table>
<p>For <span class="fnt-bold">m-tabs</span> only:</p>
<table layout="fixed">
  <tbody>
  <tr>
    <td colspan="2"><code>scrollable</code></td>
    <td colspan="2">Boolean attribute</td>
    <td colspan="6">Makes the tab list horizontally scrollable. In some cases, like flex grow, overflow doesn't happen and so the parent element will need an explicit width (try the <code>width-full</code> utility class).</td>
  </tr>
  </tbody>
</table>
<p>For tab only:</p>
<table layout="fixed">
  <tbody>
  <tr>
    <td colspan="2"><code>aria-selected</code></td>
    <td colspan="2">true or false</td>
    <td colspan="6">Set the selected tab to true. See <a href="#select-tab">Selecting tabs</a> for examples.</td>
  </tr>
  <tr>
    <td colspan="2"><code>disabled</code></td>
    <td colspan="2">Boolean attribute</td>
    <td colspan="6">Disables the tab.</td>
  </tr>
  </tbody>
</table>
<h2 id="guidelines">Guidelines</h2>
<h3 id="select-tab">Selecting tabs</h3>
<h4>Selecting the tab</h4>
<p>Setting the selected tab is handled by your app. To select a tab, set <code>aria-selected="true"</code>. There are a several approaches you could take to manage this, but event delegation comparing tabs to the clicked tab is probably the simplest without a framework:</p>
<code-sample>
  <script>
    const selectTab = e => e.currentTarget.querySelectorAll('[role=tab]').forEach(tab => tab.ariaSelected = tab === e.target);
  </script>
  <m-tabs onclick="selectTab(event)">
    <button role="tab">A</button>
    <button role="tab">B</button>
  </m-tabs>
</code-sample>
<p>That will only select the tab. Selecting the corresponding tab panel is explained next.</p>
<h4>Showing a tab panel</h4>
<p>Mdash assumes nothing about what happens when a tab is selected, which allows for multiple solutions like toggling the <code>hidden</code> attribute, directly changing the DOM, rendering different components, navigating to a new page, or something else. Here's an example of the typical use case of selecting a tab and showing its panel:</p>
<code-sample readonly="readonly">
  <script>
    function switchTab(e) \{
      // Note that e.target could be a child element if you included an icon or something in the tab, so get the actual tab element in that case.
      const selectedTabId = e.target.closest('[role=tab]').id;

      // Select the tab and its panel
      e.currentTarget.querySelectorAll('[role=tab]').forEach(tab => tab.ariaSelected = tab.id === selectedTabId);
      document.querySelectorAll('[role=tabpanel').forEach(panel => panel.hidden = panel.dataset.tabId !== selectedTabId);
    }
  </script>
  <template>
    <m-tabs onclick="switchTab(event)">
      <button id="a" role="tab">A</button>
      <button id="b" role="tab">B</button>
    </m-tabs>
    <div role="tabpanel" data-tab-id="a">Tab A panel</div>
    <div role="tabpanel" data-tab-id="b">Tab B panel</div>
  </template>
</code-sample>
<p>Here's the same thing with a more declarative approach using Riot.js, for example:</p>
<code-sample readonly="readonly">
  <template>
    <app>
      <m-tabs onclick="{switchTab}">
        <button id="a" aria-selected="{state.tab === 'a'}">A</button>
        <button id="b" aria-selected="{state.tab === 'b'}">B</button>
      </m-tabs>
      <div if="{state.tab === 'a'}">Tab A panel</div>
      <div if="{state.tab === 'b'}">Tab B panel</div>

      <script>
        export default {
          switchTab(e) {
            this.update({tab: e.target.id});
          }
        }
      </script>
    </app>
  </template>
</code-sample>

<h3 id="a11y">Accessibility</h3>
<p>All of the necessary ARIA attributes are here in the example below:</p>
<code-sample readonly="readonly">
<template>
  <m-tabs role="tablist">
    <button id="a" aria-controls="a-panel" role="tab">A</button>
    <button id="b" aria-controls="b-panel" role="tab">B</button>
  </m-tabs>
  <div id="a-panel" role="tabpanel" aria-labelledby="a">
    This content is shown when the "a" Tab is selected.
  </div>
  <div id="b-panel" role="tabpanel" aria-labelledby="b">
    This content is shown when the "b" Tab is selected.
  </div>
</template>
</code-sample>
