<div id="home-logo-version" class="hidden txt-center mar-t-lg">
  <img src="/img/m-logo.png" alt="Mdash logo" title="Mdash" width="100px">
  <small class="block mar-t-sm txt-md">{{ version }}</small>
</div>
<div id="home-intro" class="mar-t-xl">
  <div id="home-messages" class="flex align-items-center justify-content-center txt-center">
    <h1>A design system that fully embraces web standards ðŸ¤—</h1>
    <h1 hidden>Think of it as HTML6</h1>
    <h1 hidden>So modern it feels old!</h1>
    <h1 hidden>Because UI should be fun ðŸ¥³</h1>
    <h1 hidden>It's freedom, baby. Yeah!</h1>
    <h1 hidden>Standards #FTW</h1>
    <h1 hidden>Code depressed? Call 1-800-MDASH</h1>
    <h1 hidden>28 components, 220+ utility classes, and it's how small???</h1>
    <h1 hidden>"Nothing is faster than nothing."<br><span style="white-space: nowrap">-Me</span></h1>
    <h1 hidden>The AWS bill was $90 last month!!</h1>
    <h1 hidden>You can stop reading this.</h1>
    <h1 hidden>How many of these are there?</h1>
    <h1 hidden>15, including this one.</h1>
    <h1 hidden>Does it loop though?</h1>
    <h1 hidden>No.</h1>
  </div>
  <div class="mar-auto mar-b-xs txt-center txt-lg">
    <div class="mar-b-xs">Mdash intends to leverage HTML, not replace it or try to outsmart it.</div>
    <div>This makes Mdash ideal for all web projects and skill levels.</div>
  </div>
  <div id="benefits" class="flex justify-content-center gap-sm flx-wrap txt-center txt-xs fnt-bold mar-lg">
    <div class="align-self-center">linkable</div>
    <hr aria-orientation="vertical">
    <div class="align-self-center">tiny <a href="#performance">6kb</a></div>
    <hr aria-orientation="vertical">
    <div class="flex align-items-center">
      <m-icon name="devices" class="txt-md mar-r-xs"></m-icon>responsive
    </div>
    <hr aria-orientation="vertical">
    <div class="align-self-center">zero dependencies</div>
    <hr aria-orientation="vertical">
    <a href="#compatibility" class="align-self-center">very compatible</a>
    <hr aria-orientation="vertical">
    <div class="align-self-center">accessible</div>
  </div>
</div>
<div class="mar-auto txt-center mar-t-xl" style="max-width: 545px">
  <h3 id="quick-start" class="mar-t-0 mar-b-0">Quick start</h3>
  <p class="mar-t-0 mar-b-xs">This is the web. Let's use it.</p>
  <code-sample readonly="readonly">
    <template>
      <link href="{{prodCdnUrl}}.woff2" rel="preload" as="font" crossorigin>
      <link href="{{prodCdnUrl}}.css" rel="stylesheet">
      <script src="{{prodCdnUrl}}.js" defer></script>
    </template>
  </code-sample>
  <div class="txt-xs">or <a href="#installation">npm</a></div>
</div>
<hr class="mar-t-xl mar-b-xl">
<div id="intro" class="txt-maxlength">
  <h2 class="mar-t-0">About</h2>
  <h3>What is Mdash?</h3>
  <p>Mdash is a new kind of UI library. It's 100% standards-based and it's tiny.</p>
  <p>Mdash components are comprised of <span class="fnt-med">standard HTML</span>, <span class="fnt-med">custom HTML</span>, and <span class="fnt-med">Custom Elements</span>. As such, Mdash works with <a href="#compatibility">any framework</a> or no framework, and works with all types of web projects like SSR, SPA, PWA, static site, and even popular email clients.</p>
  <h3>What makes Mdash different?</h3>
  <p>Quite literally, nothing. <span class="fnt-italic">Nothing</span> is exactly what makes Mdash different:</p>
  <ul>
    <li>No new concepts or abstractions</li>
    <li>No setup or configuration</li>
    <li>Nothing proprietary</li>
    <li>No dependencies</li>
    <li>No build step</li>
  </ul>
  <p>It's just HTML plus custom HTML. As a result, no other UI library is as small or easy or familiar as Mdash.</p>
  <p>Take a look around and compare Mdash's <a href="#performance">size</a> and <a href="/comparison">markup</a> to see how nothing really is better.</p>
  <h3>Where did Mdash come from?</h3>
  <p class="mar-b-0">Mdash is the result of building design systems in large engineering organizations where - for better or worse - tech stacks and architectures vary wildly, but the products still need to share common UI elements. It was during this time the
    <a href="https://jordanbrennan.hashnode.dev/tac-a-new-css-methodology" target="_blank" class="txt-nowrap">TAC CSS methodology</a> was created with Mdash being the first open-source implementation.</p>
</div>
<hr class="mar-t-xl mar-b-xl">
<h2 id="compatibility">Compatible with everything</h2>
<p>Mdash can be used anywhere HTML is used because it is HTML. Larger organizations especially benefit here because unlike other UI libraries, Mdash will work with all your products regardless of technology. To demonstrate, here's code samples of <span class="fnt-bold">13 different technologies</span> all using the same Mdash component:</p>
<code-sample readonly="readonly">
<template>
  <!--   Vue   -->
  <m-alert v-if="alert" v-bind:type="alert.type">\{{ alert.message }}</m-alert>


  <!--   Angular   -->
  <m-alert *ngIf="alert" [type]="alert.type">\{{ alert.message }}</m-alert>


  <!--   Riot   -->
  <m-alert if="{alert}" type="{alert.type}">{alert.message}</m-alert>


  <!--   Preact   -->
  {props.alert &&
  <m-alert type={props.alert.type}>{props.alert.message}</m-alert>
  }


  <!--   Svelte   -->
  {#if alert}
    <m-alert bind:type="{alert.type}">{alert.message}</m-alert>
  {/if}


  <!--   Handlebars   -->
  \{{#if alert}}
  <m-alert type="\{{alert.type}}">\{{alert.message}}</m-alert>
  \{{/if}}


  <!--   Lit, Hyper, other template literals   -->
  html`
  <m-alert type="${alert.type}">${alert.message}</m-alert>
  `


  <!--   EJS, ERB, Underscore, Lodash   -->
  <m-alert type="<%= alert.type %>"><%= alert.message %></m-alert>


  <!--   Static HTML of course :)   -->
  <m-alert type="success">My message</m-alert>
</template>
</code-sample>
<small>*Framework compatibility with Custom Elements is being tracked on <a href="https://custom-elements-everywhere.com" target="_blank" rel="noopener">custom-elements-everywhere.com</a>. Today, all but
  <a href="https://custom-elements-everywhere.com/#react">one</a> works with this standard.</small>
<h2 id="performance">Performance</h2>
<p>Mdash is fast! It is by all practical measures instant. The <span class="fnt-bold">execution speed</span> comes from leveraging standards and reducing abstractions as much as possible in order to minimize code and retain browser optimizations. When it comes to code, nothing is faster than nothing. In addition to execution speed, <span class="fnt-bold">pages load faster</span> because Mdash is so much smaller than other UI libraries:</p>
<table>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Mdash</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="6.8"></meter>
      <small>6.8 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Bootstrap</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="71.4"></meter>
      <small>71.4 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Material Web 2</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="79.5"></meter>
      <small>79.5 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Zurb Foundation</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="87.8"></meter>
      <small>87.8 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">React Bootstrap</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="103"></meter>
      <small>103 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Material-UI</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="134"></meter>
      <small>134 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Semantic UI</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="174"></meter>
      <small>174 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Microsoft Fabric</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="244"></meter>
      <small>244 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Shoelace</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="294"></meter>
      <small>294 kb</small>
    </td>
  </tr>
  <tr>
    <td style="width: 140px">
      <span class="fnt-bold txt-nowrap">Material Web 3</span>
    </td>
    <td>
      <meter min="0" max="353" low="20" optimum="12" high="80" value="353"></meter>
      <small>353 kb</small>
    </td>
  </tr>
</table>
<small class="block mar-t-xs">
  <span class="fnt-bold">Note:</span> Sizes are min+gzip and include stylesheets, scripts, and runtime dependencies. They do not include icons. In other words, this is the overhead before you can write your first line of code.
</small>
<h2 id="installation">Installation</h2>
<h3 id="installation-cdn">CDN</h3>
<p>Mdash is designed for production use with a CDN. Copy and paste the following into the <code>&lt;head&gt;</code> section of your document and you're golden.</p>
<div>
  <h4 class="mar-b-xs">Icon font preload</h4>
  <pre style="white-space: pre-wrap">&lt;link href="{{prodCdnUrl}}.woff2" rel="preload" as="font" crossorigin&gt;</pre>
  <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload" target="_blank">preload</a> option tells the browser to start downloading the icon font now instead of waiting for the stylesheet to be parsed. If you don't use icons, you don't need this.</p>
</div>
<div>
  <h4 class="mar-b-xs">Stylesheet</h4>
  <pre style="white-space: pre-wrap">&lt;link href="{{prodCdnUrl}}.css" rel="stylesheet"&gt;</pre>
  <p>This file includes <a href="/custom-properties">custom properties</a>, all component styles, and <a href="/utility-classes">utility classes</a>.</p>
</div>
<div>
  <h4 class="mar-b-xs">Custom Elements</h4>
  <pre style="white-space: pre-wrap">&lt;script src="{{prodCdnUrl}}.js" defer&gt;&lt;/script&gt;</pre>
  <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#defer" target="_blank">defer</a> option tells the browser to download the script but delay its evaluation to avoid blocking document parsing.</p>
</div>
<h3 id="installation-npm">NPM</h3>
<p>If the CDN is not an option, you can install the Mdash package and bundle the files.</p>
<pre style="white-space: pre-wrap">npm install m-</pre>
<p>Built assets (those three files above) are located in <code>/dist</code>. The hyper optimization of <a href="https://web.dev/extract-critical-css/" target="_blank">inlining</a> is also possible with Mdash because its so small. Go for it you speed demon!</p>
<h2 id="browsers">Browser support</h2>
<p>Mdash works with the latest versions of all major browsers. Please <a href="https://github.com/jfbrennan/m-/issues" target="_blank" rel="noopener">file a bug</a> if you see something not working as expected.</p>
<h2 id="about">More about Mdash</h2>
<h3>The purpose</h3>
<p>To return the UI layer back to its rightful owner: the web platform.</p>
<p>The UI layer - the pixels - should be built with the modern web platform. Technologies likes CSS Custom Properties, Web Components, and new HTML and JavaScript features can and should be used to create the UI layer. No dependencies needed!</p>
<p>The application layer - data, routing, business logic, services - should also be built with the modern web stack as well as 3rd-party libraries and frameworks.</p>
<p>Mdash gives you a complete set of modern compatible-with-everything UI components instantly available from a CDN. No downloads. No CLI. No configuration. No build steps. No prespiling the virtual tree-shake lint matrix, or whatever. It does this by <span class="fnt-italic">embracing</span> HTML (and CSS and JavaScript) and relentlessly leveraging it. The result is a fun and uniquely small design system with standards-level longevity.</p>
<p>Depending on the kind of project you're working on, you can use Mdash on its own or alongside your framework of choice. In the latter case, the framework is responsible for the <em>structure and state of your application</em> while HTML and Mdash supply the final layer of UI.</p>
<h3>Frameworks are misused</h3>
<p>The UI layer of web applications has been overcomplicated and made dependent upon non-standard frameworks and methodologies that, in the context of generic UI components, do not add value. Frameworks are best applied to application-centric problems like routing, state management, and high-level product-centric component structure. Frameworks are not ideal for pure UI-centric problems like layout, shared UI elements, and generic styles.</p>
<h3>The m- prefix</h3>
<p>A prefix is required for any custom HTML (<a href="https://dev.to/jfbrennan/custom-html-tags-4788" target="_blank" rel="noopener">tags or elements</a>). The "m" is for markup, because Mdash is all about that beautiful declarative markup! And no the name "Mdash" doesn't have anything to do with Lodash. It was suggested the proper name be changed from "M-" to "Mdash" to help with search engine results.</p>
<h3>Design philosophy</h3>
<p>Mdash believes in and is committed to the web platform. Developing on the web is awesome because:</p>
<ul>
  <li>It's open</li>
  <li>Has low barriers to entry</li>
  <li>Easier than other platforms</li>
  <li>Available on virtually every device in the world!</li>
  <li>Has the biggest and most active user base by far!</li>
</ul>
<p>Mdash was designed with all that in mind. It's why
  <a href="#installation">CDN install</a> is the first option and not buried or unavailable as if linking to other resources on the internet is a last resort. It's why Mdash components are built with standard, approachable tech and not a popular JavaScript library. It's why there is no special syntax or proprietary ideas and why there's no dependencies. It's why the project is open source.</p>
<p>The intent of the Mdash API design is to be familiar. Where possible, Mdash matches native HTML, e.g. <code>type=""</code>, <code>name=""</code>, <code>disabled</code>, and when there isn't a native example to follow Mdash strives to use familiar patterns, e.g. <code>dismissible="false"</code> for Alert was chosen because it feels similar to the native <code>draggable="false"</code> attribute. If you could cover up all the <code>m-</code> prefixes in your markup, the hope is you couldn't tell the difference between native HTML elements and Mdash.</p>
<h3>It's for everyone!</h3>
<p>The web is an open platform accessible to everyone and so a design system for the web shouldn't require advanced knowledge just to get started, and it shouldn't require a commitment to learn a specific framework's idioms and API in order to make full use of it. Mdash serves true beginners equally as well as it does professional software engineers. So, whether you're building your first website or a large scale application with millions of users, Mdash helps you quickly build UI with
  <a href="/comparison">significantly less code</a> and with the longevity that only comes with standards-based code.</p>
<!--<h2>Contribution & support</h2>-->
<!--<p>If Mdash has helped you, please help Mdash with its hosting fees: <a href="">Open Collective</a></p>-->
<!--<p>If you want to contribute, <a href="https://github.com/jfbrennan/m-/issues" rel="noopener">come on over to GitHub</a> and help.</p>-->

<script>
  // Cycle through the messages at the top of the page
  const intervalId = setInterval(goToNextMessage, 3900);

  function goToNextMessage() {
    const currentMessage = document.getElementById('home-messages').querySelector('h1:not([hidden])');
    const nextMessage = currentMessage.nextElementSibling;

    // Hide current, show next
    if (nextMessage) {
      currentMessage.hidden = true;
      nextMessage.hidden = false;
    }
    else {
      clearInterval(intervalId);
    }
  }
</script>
