<h1 class="mar-b-xs">Autocomplete</h1>
<h2 class="txt-gray-5 mar-t-0">Text input for searching values or getting suggestions</h2>
<h2 id="demo">Demo</h2>
<code-sample>
<template>
  <fieldset>
    <label>Search</label>
    <m-autocomplete source="fruit" placeholder="Slowly type 'apl' to see the behavior"></m-autocomplete>
    <datalist id="fruit">
      <option value="apple"></option>
      <option value="banana"></option>
      <option value="cherry"></option>
      <option value="peach"></option>
    </datalist>
  </fieldset>
</template>
</code-sample>
<h2 id="api">API</h2>
<h3 id="tag">Tags</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Type</th>
    <th colspan="6">Content</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>m-autocomplete</code></td>
    <td colspan="2">Custom Element</td>
    <td colspan="6">None</td>
  </tr>
  <tr>
    <td colspan="2"><code>datalist</code></td>
    <td colspan="2">Native element</td>
    <td colspan="6"><code>&lt;option&gt;</code> elements</td>
  </tr>
  </tbody>
</table>
<h3 id="attributes">Attributes</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Value</th>
    <th colspan="6">Description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>source</code> <small class="fnt-bold fnt-italic">required</small></td>
    <td colspan="2">String</td>
    <td colspan="6">The source of data to query for matches. This must be the id of a <code>&lt;datalist&gt;</code> element or the name of a custom source function. Learn how to create them <a href="#creating-sources">below</a>.</td>
  </tr>
  <tr>
    <td colspan="2"><code>max</code></td>
    <td colspan="2">Number</td>
    <td colspan="6">Truncates the number of results to <code>max</code>. Autocomplete will overflow at about 10 visible results regardless of the max set.</td>
  </tr>
  </tbody>
</table>
<h3 id="events">Events</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Details</th>
    <th colspan="6">Description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>select</code></td>
    <td colspan="2">
      <pre class="overflow-auto">
{
  // Name of the source for easy reference
  source: '',

  // Value from matches
  value: '',

  // Id of match, if provided
  id: ''
}
      </pre>
    </td>
    <td colspan="6">
      <div class="mar-b-md">Fires after a match is selected. Try it:</div>
      <fieldset>
        <label>Superheroes</label>
        <m-autocomplete onselect="alert(JSON.stringify(event.detail, null, 2))" source="superheroes" placeholder="Search 'bat' or 'kent' and select a result"></m-autocomplete>
        <datalist id="superheroes">
          <option value="batman">Bruce Wayne</option>
          <option value="superman">Clark Kent</option>
          <option value="spiderman">Peter Parker</option>
        </datalist>
      </fieldset>
    </td>
  </tr>
  </tbody>
</table>
<h2 id="guidelines">Guidelines</h2>
<h3 id="creating-sources">Creating data sources for autocomplete</h3>
<p>Sources can come from a standard <code>datalist</code> element or a custom function added to the global <code>MdashAutocomplete</code>.</p>
<h4>1. Datalist element</h4>
<p>Include a standard <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist" target="_blank" rel="noopener">datalist</a> element in the DOM. Its <code>id</code> must match the Autocomplete's <code>source</code>. The options' value attributes and optional text are searched for matches. Here's an example:</p>
<code-sample readonly="readonly">
  <template>
    <fieldset>
      <label>Search</label>
      <m-autocomplete source="fruit"></m-autocomplete>
      <datalist id="fruit">
        <option value="apple"></option>
        <option value="banana"></option>
        <option value="cherry"></option>
        <option value="peach"></option>
      </datalist>
    </fieldset>
  </template>
</code-sample>
<h4>2. Custom source function</h4>
<p>These are asynchronous functions added to the static <code>MdashAutocomplete.sources</code> object. Here's another <code>fruit</code> example similar to the datalist above:</p>
<code-sample readonly="true">
  <script>
    MdashAutocomplete.sources.fruit = async (query, max) => \{

      // 1. Use `query` to fetch, filter, map, find, or whatever your logic is for determining matching results.
      // Note: `max` is the most results that will be shown, which is helpful to know beforehand when dealing with large data sets.
      const matches = ['apple', 'banana', 'cherry', 'peach'].filter(fruit => fruit.includes(query));

      // 2. Result must be an object with the original `query` param and a `matches` Array.
      // Note: `matches` elements can be strings or objects with `id` and `value` properties. See Events API above for more details.
      const result = \{query, matches};

      // 3. Return a resolved Promise with the result (async functions do this automatically).
      return result;
    }
  </script>
</code-sample>
<p><span class="fnt-bold"><m-icon name="lightbulb"></m-icon>Tip:</span> If the source's data is over the network, cache results client-side for faster lookup next time the same query is given. A simple object is often good enough, e.g. <code>const matches = cache[query] || await fetchAndCacheResults(query)</code>. You can also use <code>max</code> if it's beneficial while searching to know the maximum number of matches that will be shown.</p>
{{> more-autocomplete}}
<h3 id="a11y">Accessibility</h3>
<p>There are no extra recommendations for Autocomplete.</p>