<h1 class="mar-b-xs">Accordion</h1>
<h2 class="txt-gray-5 mar-t-0">List of expandable details elements</h2>
<h2 id="demo">Demo</h2>
<code-sample>
<template>
  <m-accordion>
    <details>
      <summary>Summary</summary>
      <p>Details about this thing</p>
    </details>
    <details>
      <summary>Summary</summary>
      <p>Details about this thing</p>
    </details>
  </m-accordion>
</template>
</code-sample>
<h2 id="api">API</h2>
<h3 id="tag">Tag</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Type</th>
    <th colspan="6">Content</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>m-accordion</code></td>
    <td colspan="2">Custom tag</td>
    <td colspan="6"><a href="/details">Details</a> children only</td>
  </tr>
  </tbody>
</table>
<h2 id="guidelines">Guidelines</h2>
<h3 id="open">Opening all or one</h3>
<p>Accordion does not control its details children, it only styles them. This means more than one details can be open at a time by default. Controlling this behavior can be managed by your app by adding/removing <code>open</code> to the details. Details elements publish a
  <a href="/details#events"><code>toggle</code></a> event makes this easy.</p>
<p>It's worth noting that limiting an accordion to one details at a time may result in a poor UX for users who want to reference information in multiple details and would need to constantly re-open them as they do so.</p>
<p>Here's two examples showing an imperative solution and a more declarative state-driven solution with Vue:</p>
<code-sample readonly="readonly">
  // Imperative
  <script>
    const handleToggle = e => \{
      // If this details was just opened, then close its open siblings
      if (e.currentTarget.open) \{
        const openSiblings = e.currentTarget.parentElement.querySelectorAll('details[open]');
        openSiblings.forEach(details => \{
          if (details !== e.currentTarget) \{
            details.open = false;
          }
        })
      }
    }
  </script>

  <template>
    <m-accordion>
      <details ontoggle="handleToggle(event)">
        <summary>Summary</summary>
        <p>Details...</p>
      </details>
      <details ontoggle="handleToggle(event)">
        <summary>Summary</summary>
        <p>Details...</p>
      </details>
    </m-accordion>
  </template>
</code-sample>
<br>
<code-sample readonly="readonly">
  // Declarative (using Vue)
  <template>
    <m-accordion>
      <details id="a" @toggle="handleToggle" :open="openDetails === 'a'">
        <summary>Summary</summary>
        <p>Details...</p>
      </details>
      <details id="b" @toggle="handleToggle" :open="openDetails === 'b'">
        <summary>Summary</summary>
        <p>Details...</p>
      </details>
    </m-accordion>

    <script>
      export default {
        data() {
          return {
            openDetails: null
          }
        },
        methods: {
          handleToggle(e) {
            this.openDetails = e.currentTarget.id
          }
        }
      }
    </script>
  </template>
</code-sample>
<h3 id="a11y">Accessibility</h3>
<p>All accessibility recommendations apply to the <a href="/details">Details</a> children.</p>
