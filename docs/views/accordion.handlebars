<h1 class="mar-b-xs">Accordion</h1>
<h2 class="txt-gray-4 mar-t-none">List of expandable Details elements</h2>
<h2 id="demo">Demo</h2>
<code-sample>
<template>
  <m-accordion>
    <details>
      <summary>Summary</summary>
      <p>Details about this thing</p>
    </details>
    <details>
      <summary>Summary</summary>
      <p>Details about this thing</p>
    </details>
  </m-accordion>
</template>
</code-sample>
<h2 id="api">API</h2>
<h3 id="tag">Tag</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Type</th>
    <th colspan="6">Content</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>m-accordion</code></td>
    <td colspan="2">Custom tag</td>
    <td colspan="6"><a href="/details">Details</a> children only</td>
  </tr>
  </tbody>
</table>
<h2 id="guidelines">Guidelines</h2>
<h3 id="open">Opening all or one</h3>
<p>Accordion does not control its Details children; your app does. You can allow all of the Accordion's Details to be open at once (the default behavior) or one at a time. Allowing one open at a time is as simple as removing the <code>open</code> attribute from other open Details. Details publishes a
  <a href="/details#events"><code>toggle</code></a> event you can listen to for this.</p>
<p>Here's two examples showing a more imperative solution and a more declarative state-driven solution with Vue:</p>
<code-sample readonly="readonly">
  // Imperative
  <script>
    const handleToggle = e => \{
      // If this Details was opened, close any open siblings
      if (e.currentTarget.open) \{
        e.currentTarget.parentElement.querySelectorAll('details[open]').forEach(details => \{
          if (details !== e.currentTarget) \{
            details.open = false;
          }
        })
      }
    }
  </script>

  <template>
    <m-accordion>
      <details ontoggle="handleToggle(event)">
        <summary>Summary</summary>
        <p>Details...</p>
      </details>
      <details ontoggle="handleToggle(event)">
        <summary>Summary</summary>
        <p>Details...</p>
      </details>
    </m-accordion>
  </template>
</code-sample>
<br>
<code-sample readonly="readonly">
  // Declarative (using Vue)
  <template>
    <m-accordion>
      <details id="a" v-on:toggle="handleToggle" v-bind:open="activeDetails === 'a'">
        <summary>Summary</summary>
        <p>Details...</p>
      </details>
      <details id="b" v-on:toggle="handleToggle" v-bind:open="activeDetails === 'b'">
        <summary>Summary</summary>
        <p>Details...</p>
      </details>
    </m-accordion>

    <script>
      export default {
        data() {
          return {
            activeDetails: null
          }
        },
        methods: {
          handleToggle(e) {
            this.activeDetails = e.currentTarget.id
          }
        }
      }
    </script>
  </template>
</code-sample>
<h3 id="a11y">Accessibility</h3>
<p>All accessibility recommendations apply to the <a href="/details">Details</a> children.</p>
