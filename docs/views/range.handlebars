<h1 class="mar-b-xs">Range Slider</h1>
<h2 class="txt-gray-5 mar-t-none">Form element for fine-grained values</h2>
<h2 id="demo">Demo</h2>
<code-sample>
  <fieldset>
    <label>Price</label>
    <input type="range">
  </fieldset>
</code-sample>
<p>See more <a href="/examples#Foo">examples</a></p>
<h2 id="api">API</h2>
<h3 id="tag">Tags</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Type</th>
    <th colspan="6">Content</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>input[type="range"]</code></td>
    <td colspan="2">Native element</td>
    <td colspan="6">None</td>
  </tr>
  <tr>
    <td colspan="2"><code>output</code></td>
    <td colspan="2">Native element</td>
    <td colspan="6">The value of range</td>
  </tr>
  </tbody>
</table>
<h3 id="attributes">Attributes</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Value</th>
    <th colspan="6">Description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>min</code></td>
    <td colspan="2">Number</td>
    <td colspan="6">Minimum value, default is 0</td>
  </tr>
  <tr>
    <td colspan="2"><code>max</code></td>
    <td colspan="2">Number</td>
    <td colspan="6">Maximum value, default is 100</td>
  </tr>
  <tr>
    <td colspan="2"><code>step</code></td>
    <td colspan="2">Number</td>
    <td colspan="6">Sets the granularity of values, default is 1</td>
  </tr>
  <tr>
    <td colspan="2"><code>orient</code> <span class="fnt-italic txt-gray-5 txt-xs">coming soon</span></td>
    <td colspan="2">vertical</td>
    <td colspan="6">Displays the range vertically</td>
  </tr>
  </tbody>
</table>
<h3 id="events">Events</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Detail</th>
    <th colspan="6">Description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>change</code></td>
    <td colspan="2">None</td>
    <td colspan="6">Fires after the value is committed.</td>
  </tr>
  <tr>
    <td colspan="2"><code>input</code></td>
    <td colspan="2">None</td>
    <td colspan="6">Fires as the value changes.</td>
  </tr>
  </tbody>
</table>
<h2 id="guidelines">Guidelines</h2>
<h3 id="output">Displaying range values</h3>
<p>A common use case is to display the value of range as it updates. Mdash leaves that part of the design open for customization, but with the one requirement to use the standard <code>&lt;output&gt;</code> element to contain the value.</p>
<p>Here's two simple designs to get you started:</p>
<m-row>
  <m-col>
    <div class="mar-b-lg">
      <fieldset>
        <label>Price</label>
        <input name="range1_demo" type="range" min="0" max="1000" value="223">
        <output name="output1_demo"></output>
      </fieldset>

      <script>
        const range1  = document.querySelector('[name=range1_demo]');
        const output1 = document.querySelector('[name=output1_demo]');
        const update1 = (e, range) => {
          range = e && e.currentTarget || range;
          output1.textContent = range.value;
        };

        range1.addEventListener('input', update1);
        update1(null, range1);
      </script>
    </div>
    <code-sample readonly="readonly">
      <template>
        <fieldset>
          <label>Price</label>
          <input name="range1" type="range" min="0" max="1000" value="223">
          <output name="output1"></output>
        </fieldset>

        <script>
          const range1  = document.querySelector('[name=range1]');
          const output1 = document.querySelector('[name=output1]');
          const update1 = (e, range) => {
            range = e && e.currentTarget || range;
            output1.textContent = range.value;
          };

          range1.addEventListener('input', update1);
          update1(null, range1);
        </script>
      </template>
    </code-sample>
  </m-col>
  <m-col>
    <div class="mar-b-xl">
      <fieldset>
        <label>Price</label>
        <input name="range2_demo" type="range" min="0" max="1000" value="223">
        <output name="output2_demo" class="pos-absolute bg-gray-1 pos-b-0 mar-b-lg pad-xs txt-xs brd-radius-md"></output>
      </fieldset>

      <script>
        const range2  = document.querySelector('[name=range2_demo]');
        const output2 = document.querySelector('[name=output2_demo]');
        const update2 = (e, range) => {
          range = e && e.currentTarget || range;
          output2.textContent = range.value;
          const val = Number((range.value - range.min) * 100 / (range.max - range.min));
          const pos = 9 - (val * 0.2); // 9 is half the thumb width
          output2.style.left = `calc(${val}% + ${pos}px)`;
        };

        range2.addEventListener('input', update2);
        update2(null, range2);
      </script>

      <style>
        input[type=range][name=range2_demo] + output {
          transform: translate(-50%);
        }
      </style>
    </div>
    <code-sample readonly="readonly">
      <template>
        <fieldset>
          <label>Price</label>
          <input name="range2" type="range" min="0" max="1000" value="223">
          <output name="output2" class="pos-absolute bg-gray-1 pos-b-0 mar-b-lg pad-xs txt-xs brd-radius-md"></output>
        </fieldset>

        <script>
          const range2  = document.querySelector('[name=range2]');
          const output2 = document.querySelector('[name=output2]');
          const update2 = (e, range) => {
            range = e && e.currentTarget || range;
            output2.textContent = range.value;
            const val = Number((range.value - range.min) * 100 / (range.max - range.min));
            const pos = 9 - (val * 0.2); // 9 is half the thumb width
            output2.style.left = `calc(${val}% + ${pos}px)`;
          };

          range2.addEventListener('input', update2);
          update2(null, range2);
        </script>

        <style>
          input[type=range] + output {
            transform: translate(-50%);
          }
        </style>
      </template>
    </code-sample>
  </m-col>
</m-row>

<!--<h3 id="vertical">Vertical orientation</h3>-->
<!--<p>The orient vertical option works well for one range, but having multiple vertical ranges requires the following:</p>-->
<!--<code-sample>-->
<!--  <div class="flex">-->
<!--    <fieldset class="pos-relative" style="width: 50px; height: 129px">-->
<!--      <input type="range" orient="vertical">-->
<!--    </fieldset>-->
<!--    <fieldset class="pos-relative mar-t-none" style="width: 50px; height: 129px">-->
<!--      <input type="range" orient="vertical">-->
<!--    </fieldset>-->
<!--    <fieldset class="pos-relative mar-t-none" style="width: 50px; height: 129px">-->
<!--      <input type="range" orient="vertical">-->
<!--    </fieldset>-->
<!--  </div>-->
<!--</code-sample>-->
<h3 id="a11y">Accessibility</h3>
<p>Use <code>for</code> and <code>id</code> as usual, but also use <code>for</code> on <code>output</code> elements. MDN has more details
  <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_slider_role">ARIA: Using the slider role</a>.</p>
