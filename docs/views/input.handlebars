<h1 class="mar-b-xs">Input</h1>
<h2 class="txt-gray-5 mar-t-none">Form element for receiving user input</h2>
<h2 id="demo">Demo</h2>
<code-sample>
  <fieldset>
    <label>Label</label>
    <input type="text" placeholder="Placeholder">
  </fieldset>
</code-sample>
<h2 id="api">API</h2>
<h3 id="tag">Tag</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Type</th>
    <th colspan="6">Content</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>input</code></td>
    <td colspan="2">Native element</td>
    <td colspan="6">None</td>
  </tr>
  </tbody>
</table>
<h3 id="attributes">Attributes</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Value</th>
    <th colspan="6">Description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>type</code></td>
    <td colspan="2">
      <ul type="none">
        <li>text <small class="fnt-bold fnt-italic">default</small></li>
        <li>email</li>
        <li>password</li>
        <li>tel</li>
        <li>number</li>
        <li>file</li>
        <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#%3Cinput%3E_types" target="_blank" rel="noopener">more...</a></li>
      </ul>
    </td>
    <td colspan="6">
      <div>Sets the expected type of value. Take care to set email, tel, password, and number inputs based on use case to ensure optimal user experience.</div>
      <p>See <a href="/checkbox">checkbox</a>, <a href="/radio">radio</a>, and <a href="/range">range</a> for details on those specific types.</p>
    </td>
  </tr>
  <tr>
    <td colspan="2"><code>disabled</code></td>
    <td colspan="2">Boolean attribute</td>
    <td colspan="6">Disables the input so it can't be changed or interacted with. It will be skipped when tabbing and its value will <span class="fnt-bold">not</span> be submitted with the form.</td>
  </tr>
  <tr>
    <td colspan="2"><code>readonly</code></td>
    <td colspan="2">Boolean attribute</td>
    <td colspan="6">Makes the input read-only, which means the user can't change its value, but can still tab to it and copy the text. Its value will be submitted with the form.</td>
  </tr>
  <tr>
    <td colspan="2"><code>invalid</code></td>
    <td colspan="2">Boolean attribute</td>
    <td colspan="6">Highlights input as having an invalid value. When the input is invalid it should have a <a href="/form#small">small element</a> explaining how to correct it. Validation is owned by your application not M-.</td>
  </tr>
  <tr>
    <td colspan="2"><code>placeholder</code></td>
    <td colspan="2">String</td>
    <td colspan="6">Displays a message inside the input. Ideal for showing an expected format or sample value.</td>
  </tr>
  <tr>
    <td colspan="2"><code>autofocus</code></td>
    <td colspan="2">Boolean attribute</td>
    <td colspan="6">If present, the browser will bring focus to this element on page load. Excellent for log in or search pages or whenever the first interaction is likely to type something.</td>
  </tr>
  <tr>
    <td colspan="2"><code>autoselect</code></td>
    <td colspan="2">Boolean attribute</td>
    <td colspan="6">If present, the browser will select the value of the input. This is convenient to the user in cases where the value is usually
      <span class="fnt-italic">replaced</span> instead of edited. Does not work with Chrome.</td>
  </tr>
  <tr>
    <td colspan="2"><code>autocomplete</code></td>
    <td colspan="2">
      <dl>
        <dt>Credit Card</dt>
          <dd>cc-name</dd>
          <dd>cc-number</dd>
          <dd>cc-csc</dd>
          <dd>cc-exp-month</dd>
          <dd>cc-exp-year</dd>
        <dt>Name</dt>
          <dd>name</dd>
          <dd>given-name</dd>
          <dd>additional-name</dd>
          <dd>family-name</dd>
        <dt>Address</dt>
          <dd>street-address</dd>
          <dd>address-level1 (state or province)</dd>
          <dd>address-level2 (city)</dd>
          <dd>postal-code</dd>
          <dd>country</dd>
        <dt>Phone & Email</dt>
          <dd>tel</dd>
          <dd>email</dd>
      </dl>
    </td>
    <td colspan="6">These are required in order for the browser to autofill the form. Not all values are shown here! See the complete list and learn more at
      <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete" target="_blank" rel="noopener">MDN: HTML autocomplete attribute</a>.</td>
  </tr>
  </tbody>
</table>
<small><span class="fnt-bold">Note:</span> Not all input attributes are listed here. See <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes" target="_blank" rel="noopener">MDN: Input element - Attributes</a> for the full list.</small>
<h2 id="guidelines">Guidelines</h2>
<h3 id="right-type">Use the right type</h3>
<p>It's very important to take the time to understand what values a user can enter in a given input and to use the right <code>type</code> for those values. If, for example, the input is for a membership number then using <code>type="number"</code> will present an easier to use numbers-only keyboard on most touch devices. The same goes for email and phone numbers. These UX optimizations are important to users and are virtually free to implement, so take a moment to ensure you're using the right input type.</p>
<h3 id="a11y">Accessibility</h3>
<p>Labels should use the <code>for</code> attribute to reference the id of its corresponding input. Inputs should use the right type (see above), autofocus, and autocomplete to improve their usability.</p>
